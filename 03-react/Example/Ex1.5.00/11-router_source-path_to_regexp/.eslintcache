[{"/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/react-router/pathMatch.js":"1","/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/pages/Page.js":"2","/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/App.js":"3","/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/index.js":"4"},{"size":2598,"mtime":1608202526711,"results":"5","hashOfConfig":"6"},{"size":1436,"mtime":1608115412164,"results":"7","hashOfConfig":"6"},{"size":852,"mtime":1608108843667,"results":"8","hashOfConfig":"6"},{"size":744,"mtime":1606915398000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"hzxu3m",{"filePath":"13","messages":"14","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/react-router/pathMatch.js",["19","20","21","22"],"///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nimport {pathToRegexp, parse, match, compile} from \"path-to-regexp\";\n\n\n//-------------------------------------------------------------------------------------------------------------------//\n\n\nfunction pathMatch(path,pathname,  options) {\n\n    // testPathRoRegexp();\n\n    const keys = [],\n        rergExp = pathToRegexp(path, keys, getOptions(options)),\n        // pathname = window.location.pathname,\n        result = rergExp.exec(pathname);\n\n    if (!result) {\n\n        return;\n    }\n\n    let groups = Array.from(result);\n    groups = groups.slice(1);\n\n    const params = getParams(groups, keys);\n\n    return {\n        isExact: pathname === result[0],\n        params,\n        path,\n        url: result[0],\n    }\n}\n\nfunction getParams(groups, keys = []) {\n\n    const obj = {};\n\n    for (let i = 0; i <= keys.length - 1; i++) {\n\n        const val = groups[i],\n            name = keys[i].name;\n        obj[name] = val;\n    }\n\n    return obj;\n}\n\nfunction getOptions(options = {}) {\n\n    const defaultOptions = {\n        exact: false,\n        sensitive: false,\n        strict: false\n    }, opts = {...defaultOptions, ...options};\n\n    return {\n        exact: opts.exact,\n        sensitive: opts.sensitive,\n        end: opts.strict\n    }\n}\n\n\nfunction testPathRoRegexp() {\n\n    /**\n     * pathToRegexp(path: str, key: arr, options: obj);\n     *\n     *\n     * @path: 字符串数组或正则表达式\n     * @key: 数组中存储在 path 中匹配的 关键字 ':key' 等信息\n     * @options: {\n     *     sesitive: false,             // 是否区分大小写\n     *     strict: false,               // 不允许可选的尾随定界符匹配时\n     *     end: true,                   // 是否匹配到表达式匹配字符串的结尾\n     *     start: true,                 // 是否从表达式从字符串开头开始匹配时\n     *     dlimiter: '/#?',             // 默认分隔符段\n     *     endsWith: 'x=>x',            // 字符或字符列表，视为“结束”字符\n     *     prefixes: './',              // 解析时自动考虑前缀的字符列表\n     * }\n     */\n\n    const res = pathToRegexp('/news/:id/:page');\n\n    console.log(res);\n\n    console.log(res.exec('/news/123/5'));\n}\n\n\n//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//\n\n\nexport {\n\n    pathMatch\n};\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n","/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/pages/Page.js",["23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38"],"/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/App.js",[],"/Users/lalpha/SynologyDrive/Drive/dlp/dlp-lrn/GitHub/Framework-library-note/03-react/Example/Ex1.5.00/11-router_source-path_to_regexp/src/index.js",[],{"ruleId":"39","severity":1,"message":"40","line":4,"column":23,"nodeType":"41","messageId":"42","endLine":4,"endColumn":28},{"ruleId":"39","severity":1,"message":"43","line":4,"column":30,"nodeType":"41","messageId":"42","endLine":4,"endColumn":35},{"ruleId":"39","severity":1,"message":"44","line":4,"column":37,"nodeType":"41","messageId":"42","endLine":4,"endColumn":44},{"ruleId":"39","severity":1,"message":"45","line":67,"column":10,"nodeType":"41","messageId":"42","endLine":67,"endColumn":26},{"ruleId":"39","severity":1,"message":"46","line":4,"column":15,"nodeType":"41","messageId":"42","endLine":4,"endColumn":23},{"ruleId":"39","severity":1,"message":"47","line":4,"column":24,"nodeType":"41","messageId":"42","endLine":4,"endColumn":33},{"ruleId":"39","severity":1,"message":"48","line":4,"column":34,"nodeType":"41","messageId":"42","endLine":4,"endColumn":44},{"ruleId":"39","severity":1,"message":"49","line":4,"column":45,"nodeType":"41","messageId":"42","endLine":4,"endColumn":55},{"ruleId":"39","severity":1,"message":"50","line":4,"column":56,"nodeType":"41","messageId":"42","endLine":4,"endColumn":67},{"ruleId":"39","severity":1,"message":"51","line":4,"column":68,"nodeType":"41","messageId":"42","endLine":4,"endColumn":75},{"ruleId":"39","severity":1,"message":"52","line":4,"column":76,"nodeType":"41","messageId":"42","endLine":4,"endColumn":82},{"ruleId":"39","severity":1,"message":"53","line":4,"column":83,"nodeType":"41","messageId":"42","endLine":4,"endColumn":102},{"ruleId":"39","severity":1,"message":"54","line":4,"column":103,"nodeType":"41","messageId":"42","endLine":4,"endColumn":118},{"ruleId":"39","severity":1,"message":"55","line":4,"column":119,"nodeType":"41","messageId":"42","endLine":4,"endColumn":132},{"ruleId":"39","severity":1,"message":"56","line":5,"column":8,"nodeType":"41","messageId":"42","endLine":5,"endColumn":17},{"ruleId":"39","severity":1,"message":"57","line":6,"column":41,"nodeType":"41","messageId":"42","endLine":6,"endColumn":45},{"ruleId":"39","severity":1,"message":"58","line":6,"column":47,"nodeType":"41","messageId":"42","endLine":6,"endColumn":53},{"ruleId":"39","severity":1,"message":"59","line":6,"column":55,"nodeType":"41","messageId":"42","endLine":6,"endColumn":62},{"ruleId":"39","severity":1,"message":"60","line":6,"column":64,"nodeType":"41","messageId":"42","endLine":6,"endColumn":72},{"ruleId":"39","severity":1,"message":"61","line":6,"column":74,"nodeType":"41","messageId":"42","endLine":6,"endColumn":84},"no-unused-vars","'parse' is defined but never used.","Identifier","unusedVar","'match' is defined but never used.","'compile' is defined but never used.","'testPathRoRegexp' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useReducer' is defined but never used.","'useContext' is defined but never used.","'useCallback' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'useImperativeHandle' is defined but never used.","'useLayoutEffect' is defined but never used.","'useDebugValue' is defined but never used.","'PropTypes' is defined but never used.","'Link' is defined but never used.","'Switch' is defined but never used.","'NavLink' is defined but never used.","'Redirect' is defined but never used.","'withRouter' is defined but never used."]